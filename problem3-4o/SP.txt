Intent: Create a singular python function that for a tree with n nodes rooted at node 0 (numbered from 0 to n-1), where each node i has a value given by values[i], determines the maximum sum of values along any path that starts at a node u and only goes downward in the tree. 

Plan and code: Lets think it step by step:
1. We need to calculate a way to distinguish the different paths that can be taken, from the root to the leaves
2. Once we have each of the paths, calculate wich is the best sum of values along each
3. When we have all of the best sums, return the greatest.

def bestSumDownwardTreePath(parentsList, values):
n = len(parentsList)
tree = [[] for _ in range(n)]

# Build the tree from parentsList
for child, parent in enumerate(parentsList):
    if parent != -1:  # if the parent is not -1 (root)
        tree[parent].append(child)

# A helper function to perform DFS and compute the maximum path sum
def dfs(node):
    # Initialize the maximum sum for the current node to its value
    max_sum = values[node]
    
    # Explore all the children of the current node
    for child in tree[node]:
        max_sum = max(max_sum, values[node] + dfs(child))
    
    return max_sum

# Call dfs starting from the root node (0)
return dfs(0)


Intent: Create a singular python function that given an integer n and an undirected, weighted tree rooted at node 0 with n nodes numbered from 0 to n - 1. This is represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates an edge from node ui to vi with weight wi. The weighted median node is defined as the first node x on the path from ui to vi such that the sum of edge weights from ui to x is greater than or equal to half of the total path weight. You are given a 2D integer array queries. For each queries[j] = [uj, vj], determine the weighted median node along the path from uj to vj. Return an array ans, where ans[j] is the node index of the weighted median for queries[j].

Plan and code: