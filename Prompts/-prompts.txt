REFINEMENT BASED TECHNIQUES
---------------------------

	Recursive Criticism & Improvement (RCI)
	---------------------------------------

	Write a function in python that [] 

	Analyze the code you have generated and find problems it has and correct them 


	Progressive Hint Prompting (PHP)
	--------------------------------

	Write a function in python that [] 

	Write a function in python that [] (Hint: the answer is near to: 

	[Code]

	)


DECOMPOSITION BASED TECHNIQUES
------------------------------
	
	Least-to-most
	-------------

	Q: We need to create a python function that for a tree with n nodes rooted at node 0 (numbered from 0 to n-1), where each node i has a value given by values[i], determine the maximum sum of values along any path that starts at a node u and only goes downward in the tree. 

	A: To answer the question to "what is the path with the greatest value in the tree?" we need to respond to "What are the different paths?" and "what is the best sum of values along each of the paths?" to respond. 

	Q: We need to create a python function that []


	Self planning
	-------------

	Intent: Create a python function that for a tree with n nodes rooted at node 0 (numbered from 0 to n-1), where each node i has a value given by values[i], determines the maximum sum of values along any path that starts at a node u and only goes downward in the tree. 

	Plan: Lets think it step by step:
	1. We need to calculate a way to distinguish the different paths that can be taken, from the root to the leaves
	2. Once we have each of the paths, calculate wich is the best sum of values along each
	3. When we have all of the best sums, return the greatest.

	Intent: Create a python function that []

REASONING-BASED TECHNIQUES
--------------------------

	Zero-Shot CoT
	-------------

	Q: You need to create a function in python that []. First, create a sequence of logical reasonings. Once you have it, implement the code following that sequence.

	CoT
	---

	Q: You need to create a function in python that for a tree with n nodes rooted at node 0 (numbered from 0 to n-1), where each node i has a value given by values[i], determines the maximum sum of values along any path that starts at a node u and only goes downward in the tree. 

	A: To find the maximum sum of values along any path, we need to calculate all of the absolute paths we can take through the tree, theese are the ones from the root to the leaves. Once we have all of them, we have to calculate which is the best sum of values along each and return the greatest between all of the paths.

	def bestSumDownwardTreePath(parentsList, values):
    n = len(parentsList)
    tree = [[] for _ in range(n)]
    
    # Build the tree from parentsList
    for child, parent in enumerate(parentsList):
        if parent != -1:  # if the parent is not -1 (root)
            tree[parent].append(child)
    
    # A helper function to perform DFS and compute the maximum path sum
    def dfs(node):
        # Initialize the maximum sum for the current node to its value
        max_sum = values[node]
        
        # Explore all the children of the current node
        for child in tree[node]:
            max_sum = max(max_sum, values[node] + dfs(child))
        
        return max_sum
    
    # Call dfs starting from the root node (0)
    return dfs(0)

	Q: You need to create a function in python that []



PRIMMING TECHNIQUES
-------------------

	Persona
	-------

	Q: Act as if you were an expert python programmer. Create a python function that []












