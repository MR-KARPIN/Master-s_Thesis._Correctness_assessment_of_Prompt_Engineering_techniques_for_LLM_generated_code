import os
import sys
from openai import OpenAI
import re


def getOpenAIClient():
    api_key = os.getenv("OPENAI_API_KEY")
    return OpenAI(api_key=api_key) if api_key else "Error: OpenAI API key not found. Set the 'OPENAI_API_KEY' environment variable."

# Calls the openAI model
def openAI_API_request(prompt, model="gpt-4o", temperature=0.7, max_tokens=2048):
    client = getOpenAIClient()

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=temperature,
            max_tokens=max_tokens
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {str(e)}"


# Specific case for Recursive Criticism and Improvement prompting technique
def rci_API_request(prompt):
    client = getOpenAIClient()
    messages = []

    for i in range(4):  # 1 prompt + 3 follow-ups
        user_input = prompt if i == 0 else "Analyze the code you have generated and find problems it has and correct them."
            
        messages.append({"role": "user", "content": user_input})
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        assistant_reply = response.choices[0].message.content
        messages.append({"role": "assistant", "content": assistant_reply})

        print(f"\n{'Initial response' if i == 0 else f'Analysis #{i}'}:\n", assistant_reply)

    return messages[-1]["content"]


# Reads all the documents in a folder that dont have "test" or "-response" in it
def read_documents_from_folder(folder_path, file_extensions=None):
    documents = {}

    if not os.path.isdir(folder_path):
        raise ValueError(f"Error: The folder '{folder_path}' does not exist or is not a directory.")

    for filename in os.listdir(folder_path):
        if filename == ".DS_Store":
            continue
        file_path = os.path.join(folder_path, filename)

        # Check if it's a file and has the correct extension
        if os.path.isfile(file_path) and (file_extensions is None or any(filename.endswith(ext) for ext in file_extensions)) and "-response" not in filename and "test" not in filename:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    documents[filename] = file.read()
            except Exception as e:
                print(f"Error reading {filename}: {e}")

    return documents


# Stores responses from the documents dictionary generated by read_documents_from_folder()
def store_responses(documents, folder_path):
     # Create new filename with "-response"
    for doc in documents:
        prompt = documents[doc]
        # print()   
        # print(f"----DOCUMENT----: {doc}")
        # print(prompt)   
        # print()
        response = rci_API_request(prompt) if doc == "RCI.txt" else openAI_API_request(prompt)
        # print("----RESPONSE----")
        # print(response)  
        # print()
        base_name, ext = os.path.splitext(doc)
        new_filename = f"{base_name}-response{ext}"
        new_file_path = os.path.join(folder_path, new_filename)

        with open(new_file_path, 'w', encoding='utf-8') as new_file:
            new_file.write(response)

        print(f"Created: {new_filename}")

def test_problem(folder):
    documents = read_documents_from_folder(folder)
    store_responses(documents, folder)

folder_path =  sys.argv[1] if len(sys.argv) > 1 else "./problem1-4o/"
test_problem(folder_path)